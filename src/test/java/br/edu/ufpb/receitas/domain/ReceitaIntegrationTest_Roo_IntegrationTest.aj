// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.edu.ufpb.receitas.domain;

import br.edu.ufpb.receitas.domain.ReceitaDataOnDemand;
import br.edu.ufpb.receitas.domain.ReceitaIntegrationTest;
import br.edu.ufpb.receitas.repository.ReceitaDAO;
import br.edu.ufpb.receitas.service.ReceitaService;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ReceitaIntegrationTest_Roo_IntegrationTest {
    
    declare @type: ReceitaIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: ReceitaIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: ReceitaIntegrationTest: @Transactional;
    
    @Autowired
    ReceitaDataOnDemand ReceitaIntegrationTest.dod;
    
    @Autowired
    ReceitaService ReceitaIntegrationTest.receitaService;
    
    @Autowired
    ReceitaDAO ReceitaIntegrationTest.receitaDAO;
    
    @Test
    public void ReceitaIntegrationTest.testCountAllReceitas() {
        Assert.assertNotNull("Data on demand for 'Receita' failed to initialize correctly", dod.getRandomReceita());
        long count = receitaService.countAllReceitas();
        Assert.assertTrue("Counter for 'Receita' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void ReceitaIntegrationTest.testFindReceita() {
        Receita obj = dod.getRandomReceita();
        Assert.assertNotNull("Data on demand for 'Receita' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Receita' failed to provide an identifier", id);
        obj = receitaService.findReceita(id);
        Assert.assertNotNull("Find method for 'Receita' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'Receita' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void ReceitaIntegrationTest.testFindAllReceitas() {
        Assert.assertNotNull("Data on demand for 'Receita' failed to initialize correctly", dod.getRandomReceita());
        long count = receitaService.countAllReceitas();
        Assert.assertTrue("Too expensive to perform a find all test for 'Receita', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<Receita> result = receitaService.findAllReceitas();
        Assert.assertNotNull("Find all method for 'Receita' illegally returned null", result);
        Assert.assertTrue("Find all method for 'Receita' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void ReceitaIntegrationTest.testFindReceitaEntries() {
        Assert.assertNotNull("Data on demand for 'Receita' failed to initialize correctly", dod.getRandomReceita());
        long count = receitaService.countAllReceitas();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<Receita> result = receitaService.findReceitaEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'Receita' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'Receita' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void ReceitaIntegrationTest.testFlush() {
        Receita obj = dod.getRandomReceita();
        Assert.assertNotNull("Data on demand for 'Receita' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Receita' failed to provide an identifier", id);
        obj = receitaService.findReceita(id);
        Assert.assertNotNull("Find method for 'Receita' illegally returned null for id '" + id + "'", obj);
        boolean modified =  dod.modifyReceita(obj);
        Integer currentVersion = obj.getVersion();
        receitaDAO.flush();
        Assert.assertTrue("Version for 'Receita' failed to increment on flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void ReceitaIntegrationTest.testUpdateReceitaUpdate() {
        Receita obj = dod.getRandomReceita();
        Assert.assertNotNull("Data on demand for 'Receita' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Receita' failed to provide an identifier", id);
        obj = receitaService.findReceita(id);
        boolean modified =  dod.modifyReceita(obj);
        Integer currentVersion = obj.getVersion();
        Receita merged = receitaService.updateReceita(obj);
        receitaDAO.flush();
        Assert.assertEquals("Identifier of merged object not the same as identifier of original object", merged.getId(), id);
        Assert.assertTrue("Version for 'Receita' failed to increment on merge and flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void ReceitaIntegrationTest.testSaveReceita() {
        Assert.assertNotNull("Data on demand for 'Receita' failed to initialize correctly", dod.getRandomReceita());
        Receita obj = dod.getNewTransientReceita(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'Receita' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'Receita' identifier to be null", obj.getId());
        receitaService.saveReceita(obj);
        receitaDAO.flush();
        Assert.assertNotNull("Expected 'Receita' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void ReceitaIntegrationTest.testDeleteReceita() {
        Receita obj = dod.getRandomReceita();
        Assert.assertNotNull("Data on demand for 'Receita' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Receita' failed to provide an identifier", id);
        obj = receitaService.findReceita(id);
        receitaService.deleteReceita(obj);
        receitaDAO.flush();
        Assert.assertNull("Failed to remove 'Receita' with identifier '" + id + "'", receitaService.findReceita(id));
    }
    
}
